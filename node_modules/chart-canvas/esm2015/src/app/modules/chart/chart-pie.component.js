import { Component, ViewChild, Input } from '@angular/core';
import { UtilChart } from './util.chart';
export class ChartPieComponent extends UtilChart {
    constructor() {
        super(...arguments);
        this.data = {};
        this.colors = [];
    }
    ngAfterViewInit() {
        let canvasEl = this.canvas.nativeElement;
        let ctx = canvasEl.getContext('2d');
        let total_value = 0;
        let color_index = 0;
        for (var categ in this.data) {
            var val = this.data[categ];
            total_value += val;
        }
        let start_angle = 0;
        for (categ in this.data) {
            val = this.data[categ];
            var slice_angle = (2 * Math.PI * val) / total_value;
            this.drawPieSlice(ctx, canvasEl.width / 2, canvasEl.height / 2, Math.min(canvasEl.width / 2, canvasEl.height / 2), start_angle, start_angle + slice_angle, this.colors[color_index % this.colors.length]);
            start_angle += slice_angle;
            color_index++;
        }
        for (categ in this.data) {
            val = this.data[categ];
            slice_angle = (2 * Math.PI * val) / total_value;
            let pieRadius = Math.min(canvasEl.width / 2, canvasEl.height / 2);
            let labelX = canvasEl.width / 2 + (pieRadius / 2) * Math.cos(start_angle + slice_angle / 2);
            let labelY = canvasEl.height / 2 + (pieRadius / 2) * Math.sin(start_angle + slice_angle / 2);
            let labelText = Math.round((100 * val) / total_value);
            if (labelText > 0) {
                ctx.fillStyle = 'white';
                ctx.font = 'bold 1em Arial';
                ctx.fillText(labelText + '%', labelX, labelY);
            }
            start_angle += slice_angle;
        }
        if (this.legend) {
            color_index = 0;
            let legendHTML = '';
            for (categ in this.data) {
                legendHTML +=
                    "<div><span style='display:inline-block;width:20px;background-color:" +
                        this.colors[color_index++] +
                        ";'>&nbsp;</span> " +
                        categ +
                        '</div>';
            }
            this.legend.nativeElement.innerHTML = legendHTML;
        }
    }
}
ChartPieComponent.decorators = [
    { type: Component, args: [{
                selector: 'canvas-chart-pie',
                template: `
           <div style='display: flex;flex-wrap: nowrap;'>
                <canvas #canvas></canvas>
                <div #legend></div>
           <div>
    `
            },] }
];
ChartPieComponent.propDecorators = {
    canvas: [{ type: ViewChild, args: ['canvas',] }],
    legend: [{ type: ViewChild, args: ['legend',] }],
    data: [{ type: Input }],
    colors: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcnQtcGllLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9hcHAvbW9kdWxlcy9jaGFydC9jaGFydC1waWUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQTZCLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkYsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQVd6QyxNQUFNLE9BQU8saUJBQWtCLFNBQVEsU0FBUztJQVRoRDs7UUFnQkUsU0FBSSxHQUFRLEVBQUUsQ0FBQztRQUVmLFdBQU0sR0FBYSxFQUFFLENBQUM7SUE4RHhCLENBQUM7SUE1REMsZUFBZTtRQUNiLElBQUksUUFBUSxHQUFzQixJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQztRQUM1RCxJQUFJLEdBQUcsR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXBDLElBQUksV0FBVyxHQUFHLENBQUMsQ0FBQztRQUNwQixJQUFJLFdBQVcsR0FBRyxDQUFDLENBQUM7UUFDcEIsS0FBSyxJQUFJLEtBQUssSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQzNCLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDM0IsV0FBVyxJQUFJLEdBQUcsQ0FBQztTQUNwQjtRQUVELElBQUksV0FBVyxHQUFHLENBQUMsQ0FBQztRQUNwQixLQUFLLEtBQUssSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ3ZCLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3ZCLElBQUksV0FBVyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEdBQUcsV0FBVyxDQUFDO1lBRXBELElBQUksQ0FBQyxZQUFZLENBQ2YsR0FBRyxFQUNILFFBQVEsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUNsQixRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsRUFDbkIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRSxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUNqRCxXQUFXLEVBQ1gsV0FBVyxHQUFHLFdBQVcsRUFDekIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FDOUMsQ0FBQztZQUVGLFdBQVcsSUFBSSxXQUFXLENBQUM7WUFDM0IsV0FBVyxFQUFFLENBQUM7U0FDZjtRQUVELEtBQUssS0FBSyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDdkIsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDdkIsV0FBVyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEdBQUcsV0FBVyxDQUFDO1lBQ2hELElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRyxDQUFDLEVBQUUsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNsRSxJQUFJLE1BQU0sR0FBRyxRQUFRLENBQUMsS0FBSyxHQUFHLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsR0FBRyxXQUFXLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDNUYsSUFBSSxNQUFNLEdBQUcsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEdBQUcsV0FBVyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBRTdGLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsV0FBVyxDQUFDLENBQUM7WUFDdEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxFQUFFO2dCQUNqQixHQUFHLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQztnQkFDeEIsR0FBRyxDQUFDLElBQUksR0FBRyxnQkFBZ0IsQ0FBQztnQkFDNUIsR0FBRyxDQUFDLFFBQVEsQ0FBQyxTQUFTLEdBQUcsR0FBRyxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQzthQUMvQztZQUNELFdBQVcsSUFBSSxXQUFXLENBQUM7U0FDNUI7UUFFRCxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDZixXQUFXLEdBQUcsQ0FBQyxDQUFDO1lBQ2hCLElBQUksVUFBVSxHQUFHLEVBQUUsQ0FBQztZQUNwQixLQUFLLEtBQUssSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO2dCQUN2QixVQUFVO29CQUNSLHFFQUFxRTt3QkFDckUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQzt3QkFDMUIsbUJBQW1CO3dCQUNuQixLQUFLO3dCQUNMLFFBQVEsQ0FBQzthQUNaO1lBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsU0FBUyxHQUFHLFVBQVUsQ0FBQztTQUNsRDtJQUNILENBQUM7OztZQS9FRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGtCQUFrQjtnQkFDNUIsUUFBUSxFQUFFOzs7OztLQUtQO2FBQ0o7OztxQkFFRSxTQUFTLFNBQUMsUUFBUTtxQkFFbEIsU0FBUyxTQUFDLFFBQVE7bUJBR2xCLEtBQUs7cUJBRUwsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgQWZ0ZXJWaWV3SW5pdCwgRWxlbWVudFJlZiwgVmlld0NoaWxkLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBVdGlsQ2hhcnQgfSBmcm9tICcuL3V0aWwuY2hhcnQnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdjYW52YXMtY2hhcnQtcGllJyxcclxuICB0ZW1wbGF0ZTogYFxyXG4gICAgICAgICAgIDxkaXYgc3R5bGU9J2Rpc3BsYXk6IGZsZXg7ZmxleC13cmFwOiBub3dyYXA7Jz5cclxuICAgICAgICAgICAgICAgIDxjYW52YXMgI2NhbnZhcz48L2NhbnZhcz5cclxuICAgICAgICAgICAgICAgIDxkaXYgI2xlZ2VuZD48L2Rpdj5cclxuICAgICAgICAgICA8ZGl2PlxyXG4gICAgYFxyXG59KVxyXG5leHBvcnQgY2xhc3MgQ2hhcnRQaWVDb21wb25lbnQgZXh0ZW5kcyBVdGlsQ2hhcnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcclxuICBAVmlld0NoaWxkKCdjYW52YXMnKVxyXG4gIHB1YmxpYyBjYW52YXM6IEVsZW1lbnRSZWY7XHJcbiAgQFZpZXdDaGlsZCgnbGVnZW5kJylcclxuICBwdWJsaWMgbGVnZW5kOiBFbGVtZW50UmVmO1xyXG5cclxuICBASW5wdXQoKVxyXG4gIGRhdGE6IGFueSA9IHt9O1xyXG4gIEBJbnB1dCgpXHJcbiAgY29sb3JzOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XHJcbiAgICBsZXQgY2FudmFzRWw6IEhUTUxDYW52YXNFbGVtZW50ID0gdGhpcy5jYW52YXMubmF0aXZlRWxlbWVudDtcclxuICAgIGxldCBjdHggPSBjYW52YXNFbC5nZXRDb250ZXh0KCcyZCcpO1xyXG5cclxuICAgIGxldCB0b3RhbF92YWx1ZSA9IDA7XHJcbiAgICBsZXQgY29sb3JfaW5kZXggPSAwO1xyXG4gICAgZm9yICh2YXIgY2F0ZWcgaW4gdGhpcy5kYXRhKSB7XHJcbiAgICAgIHZhciB2YWwgPSB0aGlzLmRhdGFbY2F0ZWddO1xyXG4gICAgICB0b3RhbF92YWx1ZSArPSB2YWw7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHN0YXJ0X2FuZ2xlID0gMDtcclxuICAgIGZvciAoY2F0ZWcgaW4gdGhpcy5kYXRhKSB7XHJcbiAgICAgIHZhbCA9IHRoaXMuZGF0YVtjYXRlZ107XHJcbiAgICAgIHZhciBzbGljZV9hbmdsZSA9ICgyICogTWF0aC5QSSAqIHZhbCkgLyB0b3RhbF92YWx1ZTtcclxuXHJcbiAgICAgIHRoaXMuZHJhd1BpZVNsaWNlKFxyXG4gICAgICAgIGN0eCxcclxuICAgICAgICBjYW52YXNFbC53aWR0aCAvIDIsXHJcbiAgICAgICAgY2FudmFzRWwuaGVpZ2h0IC8gMixcclxuICAgICAgICBNYXRoLm1pbihjYW52YXNFbC53aWR0aCAvIDIsIGNhbnZhc0VsLmhlaWdodCAvIDIpLFxyXG4gICAgICAgIHN0YXJ0X2FuZ2xlLFxyXG4gICAgICAgIHN0YXJ0X2FuZ2xlICsgc2xpY2VfYW5nbGUsXHJcbiAgICAgICAgdGhpcy5jb2xvcnNbY29sb3JfaW5kZXggJSB0aGlzLmNvbG9ycy5sZW5ndGhdXHJcbiAgICAgICk7XHJcblxyXG4gICAgICBzdGFydF9hbmdsZSArPSBzbGljZV9hbmdsZTtcclxuICAgICAgY29sb3JfaW5kZXgrKztcclxuICAgIH1cclxuXHJcbiAgICBmb3IgKGNhdGVnIGluIHRoaXMuZGF0YSkge1xyXG4gICAgICB2YWwgPSB0aGlzLmRhdGFbY2F0ZWddO1xyXG4gICAgICBzbGljZV9hbmdsZSA9ICgyICogTWF0aC5QSSAqIHZhbCkgLyB0b3RhbF92YWx1ZTtcclxuICAgICAgbGV0IHBpZVJhZGl1cyA9IE1hdGgubWluKGNhbnZhc0VsLndpZHRoIC8gMiwgY2FudmFzRWwuaGVpZ2h0IC8gMik7XHJcbiAgICAgIGxldCBsYWJlbFggPSBjYW52YXNFbC53aWR0aCAvIDIgKyAocGllUmFkaXVzIC8gMikgKiBNYXRoLmNvcyhzdGFydF9hbmdsZSArIHNsaWNlX2FuZ2xlIC8gMik7XHJcbiAgICAgIGxldCBsYWJlbFkgPSBjYW52YXNFbC5oZWlnaHQgLyAyICsgKHBpZVJhZGl1cyAvIDIpICogTWF0aC5zaW4oc3RhcnRfYW5nbGUgKyBzbGljZV9hbmdsZSAvIDIpO1xyXG5cclxuICAgICAgbGV0IGxhYmVsVGV4dCA9IE1hdGgucm91bmQoKDEwMCAqIHZhbCkgLyB0b3RhbF92YWx1ZSk7XHJcbiAgICAgIGlmIChsYWJlbFRleHQgPiAwKSB7XHJcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9ICd3aGl0ZSc7XHJcbiAgICAgICAgY3R4LmZvbnQgPSAnYm9sZCAxZW0gQXJpYWwnO1xyXG4gICAgICAgIGN0eC5maWxsVGV4dChsYWJlbFRleHQgKyAnJScsIGxhYmVsWCwgbGFiZWxZKTtcclxuICAgICAgfVxyXG4gICAgICBzdGFydF9hbmdsZSArPSBzbGljZV9hbmdsZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5sZWdlbmQpIHtcclxuICAgICAgY29sb3JfaW5kZXggPSAwO1xyXG4gICAgICBsZXQgbGVnZW5kSFRNTCA9ICcnO1xyXG4gICAgICBmb3IgKGNhdGVnIGluIHRoaXMuZGF0YSkge1xyXG4gICAgICAgIGxlZ2VuZEhUTUwgKz1cclxuICAgICAgICAgIFwiPGRpdj48c3BhbiBzdHlsZT0nZGlzcGxheTppbmxpbmUtYmxvY2s7d2lkdGg6MjBweDtiYWNrZ3JvdW5kLWNvbG9yOlwiICtcclxuICAgICAgICAgIHRoaXMuY29sb3JzW2NvbG9yX2luZGV4KytdICtcclxuICAgICAgICAgIFwiOyc+Jm5ic3A7PC9zcGFuPiBcIiArXHJcbiAgICAgICAgICBjYXRlZyArXHJcbiAgICAgICAgICAnPC9kaXY+JztcclxuICAgICAgfVxyXG4gICAgICB0aGlzLmxlZ2VuZC5uYXRpdmVFbGVtZW50LmlubmVySFRNTCA9IGxlZ2VuZEhUTUw7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==